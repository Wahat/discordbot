constytdl=require('ytdl-core-discord')
constsearch=require('./search.js')
constaudioUtils=require('./audio_utils.js')
consttextResponder=require('./responder.js').TextResponder
constvoiceResponder=require('./responder.js').VoiceResponder
constembedder=require('./embedder.js').Embedder

classDJHandler{
siri_ack_start='./resources/siri_acknowledge.mp3'
siri_ack_finish='./resources/siri_acknowledge_done.mp3'

constructor(){
/**@member{Map<string><Object>}**/
this.guildDJs=newMap()
}

/**
*
*@param{MessageContext}context
*@returns{Object}
*/
getGuildDJ(context){
constguildId=context.getVoiceConnection().channel.guild.id
if(!this.guildDJs.has(guildId)){
constdj={
connection:context.getVoiceConnection(),
queue:[],
volume:context.getConfig()["volume"],
isPlaying:false,
};
this.guildDJs.set(guildId,dj)
}
if(context.getVoiceConnection()&&
context.getVoiceConnection()!==this.guildDJs.get(guildId).connection){
this.guildDJs.get(guildId).connection=context.getVoiceConnection()
}
returnthis.guildDJs.get(guildId)
}

/**
*
*@param{MessageContext}context
*@param{int}volume
*@paramrelative
*/
volume(context,volume,relative=false){
constdj=this.getGuildDJ(context)
if(relative){
constprevVolume=dj.volume*100
volume=prevVolume*(volume/100)
}
constnewVolume=volume/100
if(dj.connection.dispatcher){
dj.connection.dispatcher.setVolume(newVolume);
}
dj.volume=newVolume
textResponder.react(context,'ðŸ‘Œ')
}

/**
*
*@param{MessageContext}context
*/
queue(context){
constdj=this.getGuildDJ(context)
textResponder.respond(context,embedder.createQueueEmbed(dj.queue,null),'queue')
}

/**
*
*@param{MessageContext}context
*@paramindex
*/
song(context,index){
constdj=this.getGuildDJ(context)
textResponder.respond(context,embedder.createSongDetailsEmbed(dj.queue,index),'current')
}

/**
*
*@param{MessageContext}context
*/
skip(context){
constdj=this.getGuildDJ(context)
this.playNext(context)
if(!textResponder.react(context,'ðŸ‘Œ')){
textResponder.respond(context,embedder.createBasicMessageEmbed('Skipping!'))
}
}

/**
*
*@param{MessageContext}context
*/
stop(context){
constdj=this.getGuildDJ(context)
if(dj.connection.dispatcher){
if(!textResponder.react(context,'ðŸ‘Œ')){
textResponder.respond(context,embedder.createBasicMessageEmbed('Stopping!'))
}
dj.connection.dispatcher.destroy();
}
this.guildDJs.delete(context.getGuild().id)
}

/**
*
*@param{MessageContext}context
*/
pause(context){
constdj=this.getGuildDJ(context)
if(!dj.connection.dispatcher){
return
}
dj.connection.dispatcher.pause()
if(!textResponder.react(context,'ðŸ‘Œ')){
textResponder.respond(context,embedder.createBasicMessageEmbed('Pausing!'))
}
}

/**
*
*@param{MessageContext}context
*/
resume(context){
constdj=this.getGuildDJ(context)
if(!dj.connection.dispatcher){
return
}
dj.connection.dispatcher.resume()
if(!textResponder.react(context,'ðŸ‘Œ')){
textResponder.respond(context,embedder.createBasicMessageEmbed('Pausing!'))
}
}

say(context,message,voice){
voiceResponder.respond(this,context,message,voice)
}

/**
*
*@param{MessageContext}context
*@param{int}mode-0forstart,1forend
*@paramcallback
*/
playHotwordAudioAck(context,mode,callback){
constfile=mode===0?this.siri_ack_start:this.siri_ack_finish
consthotwordAckStream=audioUtils.convertMp3FileToOpusStream(file)
this.playAudioEvent(context,hotwordAckStream,'opus',callback)
}

/**
*
*@param{MessageContext}context
*@paramstream
*/
playAudioWavStream(context,stream){
this.playAudioEvent(context,stream,'converted')
}

/**
*Interruptscurrentsongtoplayanaudioclip,thenresumessong
*@param{MessageContext}context
*@param{ReadableStream|Readable}audioStream
*@param{string}type
*@paramcallback
*/
playAudioEvent(context,audioStream,type,callback=()=>{}){
constcurrentSong=this.getGuildDJ(context).queue[0]
if(currentSong&&currentSong.stream){
currentSong.stream.pause()
currentSong.stream.unpipe()
}
this.getGuildDJ(context).connection.play(audioStream,{
type:type,
volume:this.getGuildDJ(context).volume
}).once('finish',()=>{
audioStream.destroy()
audioStream=undefined
this.playSong(context,currentSong,true)
callback()
})
}

/**
*
*@param{MessageContext}context
*@param{string}args
*@returns{Promise<void>}
*/
asyncplay(context,args){
consturl=awaitsearch.searchYoutube(args)
textResponder.startTyping(context)
constsongInfo=awaitytdl.getInfo(url);
textResponder.stopTyping(context)
constsong={
title:songInfo.title,
url:songInfo.video_url,
thumbnail:songInfo.thumbnail_url,
author:songInfo.author,
length:songInfo.length_seconds,
requesterId:context.getUser().id,
stream:null
}
constdj=this.getGuildDJ(context)
dj.queue.push(song)
if(dj.queue.length===1){
this.playSong(context,dj.queue[0])
}else{
textResponder.remove(context,'queue')
textResponder.respond(context,embedder.createQueueEmbed(dj.queue,song),'queue')
console.log(`${song.title}wasaddedtothequeue,newqueuesize${dj.queue.length}`)
}
}

/**
*
*@param{MessageContext}context
*@param{Object}song
*@param{boolean}resume
*@returns{Promise<void>}
*/
asyncplaySong(context,song,resume=false){
constdj=this.getGuildDJ(context)
if(!song||(resume&&!song.stream)){
if(dj.connection.dispatcher){
dj.connection.dispatcher.destroy()
}
return
}
if(!resume){
textResponder.respond(context,embedder.createNowPlayingEmbed(song),'play')
awaitvoiceResponder.respond(this,context,`Playing${song.title}`)
song.stream=awaitytdl(song.url,{
quality:'highestaudio',
highWaterMark:1024*1024*10,
})
}else{
song.stream.resume()
}

if(dj.connection.dispatcher){
dj.connection.dispatcher.destroy()
}
constdispatcher=dj.connection.play(song.stream,{
type:'opus',
volume:dj.volume,
highWaterMark:48
})
dispatcher.once('finish',()=>{
textResponder.remove(context,'play')
textResponder.remove(context,'queue')
this.playNext(context)
})
dispatcher.once('error',error=>console.error(error))

if(song&&!resume){
console.log(`NowPlaying:${song.title}`)
}
}

/**
*
*@param{MessageContext}context
*/
playNext(context){
constdj=this.getGuildDJ(context)
constsong=dj.queue.shift()
if(song){
song.stream.destroy()
song.stream=undefined
}
this.playSong(context,dj.queue[0])
}
}

module.exports.DJHandler=newDJHandler()