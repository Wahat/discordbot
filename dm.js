constcommands=require('./dm_config.json')
constconfigHandler=require('./config.js').ConfigHandler

constdefaultConfig=require('./default_config.json')

classDMHandler{
constructor(){
/**@member{Map<string,Object>}**/
this.messageStack=newMap()
}

/**
*
*@param{module:"discord.js".Client}client
*@param{Message}msg
*/
onMessageReceived(client,msg){
if(msg.author.bot){
return
}
if(!this.messageStack.has(msg.author.id)){
if(!checkIfUserIsInAServerAndIsAdmin(client,msg.author)){
msg.reply("YouarenotanadministratorofanyserverIamapartof!")
return
}
this.startNewCommandProcess(client,msg)
}
this.resumeCommandProcess(client,msg)
}

/**
*
*@param{module:"discord.js".Client}client
*@param{Message}msg
*/
startNewCommandProcess(client,msg){
constyargs=require('yargs-parser')(msg.content)
letcommandType=(yargs['_'].shift().trim())
if(!commands["commands"][commandType]){
console.log("Invalidcommand")
return
}
letcommand=commands["commands"][commandType]
this.messageStack.set(msg.author.id,{
"upcoming":command["stack"],
"completed":[],
"variables":[],
"step":"prompt",
})
}

/**
*
*@param{module:"discord.js".Client}client
*@param{Message}msg
*/
resumeCommandProcess(client,msg){
conststack=this.messageStack.get(msg.author.id)
if(stack.step==="prompt"){
msg.reply(commands["commands"][stack.upcoming[0]]["prompt"])
stack.step="response"
return
}
letcommandType=stack.upcoming.shift()
letcommand=commands["commands"][commandType]
letinvalidArg=false
command["args"].forEach(arg=>{
letparsedArg=preParseArgs(client,msg,arg)
console.log(`Parsedarg${parsedArg}`)
if(command["validation"]&&!validateArgs(command["validation"],parsedArg)){
invalidArg=true
}
stack.variables.push(parsedArg)
})
if(invalidArg){
msg.reply("InvalidArgument,tryagain")
stack.upcoming.unshift(commandType)
return
}
stack.step="prompt"
stack.completed.push(commandType)
if(stack.upcoming.length===0){
configHandler.setNewConfigParameter(...stack.variables)
this.messageStack.delete(msg.author.id)
return
}
this.resumeCommandProcess(client,msg)
}
}

functionpreParseArgs(client,msg,arg){
switch(arg){
case"guilds":
returngetUserGuilds(client,msg.author)
case"members":
returngetGuildMembers(client,msg.author,msg.content)
case"guild":
returngetGuildFromName(client,msg.author,msg.content)
}
returnmsg.content
}

functionvalidateArgs(validation,arg){
switch(validation){
case"guild":
returnarg
case"type":
returndefaultConfig[arg]
}
returntrue
}

/**
*
*@param{module:"discord.js".Client}client
*@param{User}user
*@return{Collection<Guild>|Array<Guild>}
*/
functiongetUserGuilds(client,user){
constuserGuilds=[]
client.guilds.cache.filter(guild=>guild.members.cache.find(it=>it.id===user.id)!==undefined)
.forEach(guild=>{
constguildMember=guild.members.cache.find(it=>it.id===user.id)
if(guildMember.hasPermission("ADMINISTRATOR")){
userGuilds.push(guild)
}
})
returnuserGuilds
}

functiongetGuildFromName(client,user,guildName){
returngetUserGuilds(client,user).find(it=>it.name===guildName)
}

/**
*
*@paramclient
*@param{User}user
*@param{string}guildName
*@return{Collection<GuildMember>|Array<GuildMember>}
*/
functiongetGuildMembers(client,user,guildName){
constguild=getGuildFromName(client,user,guildName)
if(!guild){
return[]
}
returnguild.members.cache.values()
}

/**
*
*@param{module:"discord.js".Client}client
*@param{User}user
*@return{Boolean}
*/
functioncheckIfUserIsInAServerAndIsAdmin(client,user){
returngetUserGuilds(client,user).length!==0
}

module.exports.DMHandler=newDMHandler()