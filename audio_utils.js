conststream=require('stream')
constlame=require('node-lame')
constprism=require('prism-media')
constfs=require('fs')
constwav=require('wav')

/**
*Thisisrequiredforthebottobeabletolisten.
*discord.jshasthis,butsometimesitdoesnotwork.
*@param{VoiceConnection}connection
*/
functionplaySilentAudioStream(connection){
connection.play(createSilenceStream(),{type:"opus"});
setTimeout(()=>{
if(connection.dispatcher){
connection.dispatcher.destroy()
}
},250)
}

/**
*
*@returns{Readable|module:stream.internal.Readable}
*/
functioncreateSilenceStream(){
constsilenceReadable=newstream.Readable()
silenceReadable._read=function(size){
this.push(Buffer.from([0xf8,0xff,0xfe]))
}
returnsilenceReadable
}

/**
*
*@returns{WritableStream|ReadableStream|TransformStream|module:stream.internal.Transform}
*/
functioncreateStereoToMonoTransformStream(){
conststereoToMonoTransformer=newstream.Transform({objectMode:true})
stereoToMonoTransformer._transform=function(chunk,encoding,done){
this.push(convertStereoToMono(chunk))
chunk=null
done()
}
returnstereoToMonoTransformer
}

/**
*
*@param{Buffer}buffer
*@returns{Buffer}
*/
functionconvertStereoToMono(buffer){
constnewBuffer=Buffer.alloc(buffer.length/2)
constHI=1
constLO=0
for(leti=0;i<newBuffer.length/2;++i){
constleft=(buffer[i*4+HI]<<8)|(buffer[i*4+LO]&0xff)
constright=(buffer[i*4+2+HI]<<8)|(buffer[i*4+2+LO]&0xff)
constavg=(left+right)/2
newBuffer[i*2+HI]=((avg>>8)&0xff)
newBuffer[i*2+LO]=(avg&0xff)
}
returnnewBuffer
}

functioncreateDownSampleTransformStream(){
constdownSampleTransformer=newstream.Transform()
downSampleTransformer._transform=function(chunk,encoding,done){
this.push(chunk)
chunk=null
done()
}
constdownsamplingstream=require('./downsamplingstream.js')
//returnnewSampleRate({type:1,channels:1,fromRate:48000,fromDepth:16,toRate:16000,toDepth:16})
returnnewdownsamplingstream({sourceSampleRate:48000,downsample:true,writableObjectMode:false})
}


/**
*Functiontowritediscordaudiostreamdirectlytomp3
*Optionscanbefound{@linkhttps://github.com/devowlio/node-lamehere}
*@param{Buffer}audioBuffer
*@param{string}outputPath
*@param{string}title
*@param{string}author
*@paramcallback
*/
functionwriteStreamToMp3File(audioBuffer,outputPath,title,author,callback){
constencoder=newlame.Lame({
"output":outputPath,
"raw":true,
"sfreq":48,
"bitwidth":16,
"signed":true,
"little-endian":true,
"mode":'s',
"meta":{
"title":"Recording",
"artist":author,
}
}).setBuffer(audioBuffer);

encoder.encode()
.then(()=>{
callback(null)
})
.catch((error)=>{
callback(error)
});
}

/**
*
*@param{string}inputPath
*@returns{ReadableStream}
*/
functionconvertMp3FileToOpusStream(inputPath){
constmp3Stream=fs.createReadStream(inputPath);
returnconvertMp3StreamToOpusStream(mp3Stream)
}

/**
*
*@param{ReadableStream|ReadStream}inputStream
*@returns{ReadableStream}
*/
functionconvertMp3StreamToOpusStream(inputStream){
constopus=newprism.opus.Encoder({rate:48000,channels:2,frameSize:960});
consttranscoder=newprism.FFmpeg({
args:[
'-analyzeduration','0',
'-loglevel','0',
'-f','s16le',
'-ar','48000',
'-ac','2',
],
});
inputStream.pipe(transcoder).pipe(opus)
returnopus
}

/**
*
*@paramaudioStream
*@param{string}outputPath
*/
functionwriteStreamToWavFile(audioStream,outputPath){
constwavWriter=newwav.FileWriter(`${outputPath}`,{
"channels":2,
"sampleRate":48000,
"bitDepth":16
})
audioStream.pipe(wavWriter)
}

constspawn=require('child_process')
/**
*
*@paraminputPath
*@paramoutputPath
*@paramcallback
*/
functionconvertWavFileToMp3File(inputPath,outputPath,callback){
spawn.execSync(`ffmpeg-i${inputPath}-ac2-ar48000-vn-b:a192k${outputPath}`)
}

module.exports.playSilentAudioStream=playSilentAudioStream
module.exports.createStereoToMonoTransformStream=createStereoToMonoTransformStream
module.exports.createDownSampleTransformStream=createDownSampleTransformStream
module.exports.writeStreamToMp3File=writeStreamToMp3File
module.exports.convertMp3FileToOpusStream=convertMp3FileToOpusStream
module.exports.convertMp3StreamToOpusStream=convertMp3StreamToOpusStream
module.exports.writeStreamToWavFile=writeStreamToWavFile
module.exports.convertWavFileToMp3File=convertWavFileToMp3File