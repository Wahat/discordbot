constctx=require('./context.js')
constevents=require('events')
constconfigHandler=require('./config.js').ConfigHandler
constdmHandler=require('./dm.js').DMHandler
constcommandConfig=require('./commands_config.json')

classGuildHandler{
constructor(){
this.eventEmitter=newevents.EventEmitter()

/**@member{Map<string><GuildContext>}**/
this.guildContexts=newMap()
}

/**
*
*@param{string}guildId
*@returns{GuildContext|null}
*/
getGuildContextFromId(guildId){
returnthis.guildContexts.get(guildId)
}

/**
*
*@param{VoiceConnection}connection
*@param{TextChannel}textChannel
*@returns{GuildContext}
*/
getGuildContext(connection,textChannel){
constguild=textChannel.guild?textChannel.guild:connection.channel.guild
if(!this.guildContexts.has(guild.id)){
this.guildContexts.set(guild.id,
newctx.GuildContext(connection,textChannel))
}
//Updateguildcontextifdifferentchannel/newvoiceconnection
constguildContext=this.guildContexts.get(guild.id)
if(guildContext.getTextChannel()!==textChannel||
connection&&guildContext.getVoiceConnection()!==connection){
this.guildContexts.set(guild.id,newctx.GuildContext(connection,textChannel))
}
returnthis.guildContexts.get(guild.id)
}

/**
*
*@callbackonJoinedCallback
*@param{GuildContext}context
*@param{MessageContext}msgContext
*/

/**
*
*@param{module:"discord.js".Client}client
*@param{onJoinedCallback}callback
*/
registerWhenToJoinListener(client,callback){
this.registerJoinOnJoin(client,callback)
this.registerJoinOnMessage(client,callback)
}

/**
*
*@param{module:"discord.js".Client}client
*@param{onJoinedCallback}callback
*/
registerJoinOnJoin(client,callback){
client.on('voiceStateUpdate',(oldState,newState)=>{
if(!hasUserJoinedChannel(oldState,newState)){
this.checkIfUserLeftCurrentChannel(oldState,newState)
return
}
if(isAlreadyInChannel(newState.channel,client.user.id)){
this.checkIfUserJoinedCurrentChannel(oldState,newState)
return
}
this.joinVoiceChannel(newState.channel,this.findTextChannel(newState.guild),callback)
})
}

/**
*
*@param{VoiceState}oldState
*@param{VoiceState}newState
*/
checkIfUserLeftCurrentChannel(oldState,newState){
if(oldState.channel&&!newState.channel){
this.eventEmitter.emit('userLeftChannel',oldState.guild.id,oldState.member.user.id)
}
}

checkIfUserJoinedCurrentChannel(oldState,newState){
if(hasUserJoinedChannel(oldState,newState)){
this.eventEmitter.emit('userJoinedChannel',newState)
}
}

/**
*
*@param{module:"discord.js".Client}client
*@param{onJoinedCallback}callback
*/
registerJoinOnMessage(client,callback){
client.on('message',/**@type{Message}**/msg=>{
if(msg.channel.type!=="text"){
if(msg.channel.type==="dm"){
dmHandler.onMessageReceived(client,msg)
}
return
}
constprefix=this.findPrefix(msg.channel.guild)
if(msg.author.bot||!msg.content.startsWith(prefix)){
return
}
constvoiceChannel=msg.member.voice.channel;
constaliasedCommand=msg.content.replace(prefix,'').split('')[0]
constguildConfig=configHandler.retrieveConfig(msg.channel.guild.id)
constactualCommand=guildConfig["aliases"][aliasedCommand]?guildConfig["aliases"][aliasedCommand]:aliasedCommand
if(!commandConfig["commands"][actualCommand]){
msg.channel.send('Notavalidcommand')
return
}
if(!voiceChannel&&commandConfig["commands"][actualCommand]["type"]==='voice'){
msg.channel.send('Youneedtobeinavoicechanneltoplaymusic!')
return
}
constmsgContext=newctx.MessageContext(msg.member.user,
msg.content.replace(prefix,'').replace(aliasedCommand,actualCommand),msg.channel,msg)
if(commandConfig["commands"][actualCommand]["type"]!=='voice'){
callback(this.getGuildContext(null,msg.channel),msgContext)
return
}
this.joinVoiceChannel(voiceChannel,msg.channel,callback,msgContext)
});
}

/**
*
*@param{VoiceChannel}voiceChannel
*@param{TextChannel}textChannel
*@paramcallback
*@param{MessageContext}msgContext
*/
joinVoiceChannel(voiceChannel,textChannel,callback,msgContext=null){
voiceChannel.join().then(connection=>{
if(msgContext){
msgContext.voiceConnection=connection
}
callback(this.getGuildContext(connection,textChannel),msgContext)
})
}

/**
*
*@param{Guild}guild
*@returns{TextChannel}
*/
findTextChannel(guild){
constdesiredChannel=""
lettextChannel=guild.channels.cache.filter(channel=>channel.type==='text')
.find(channel=>channel.name===desiredChannel)
if(!textChannel){
textChannel=guild.channels.cache.filter(channel=>channel.type==='text').first()
}
if(!textChannel){
console.log(`Notextchannelfoundfor${guild.name}`)
}
returntextChannel
}

/**
*
*@param{Guild}guild
*@returns{string}
*/
findPrefix(guild){
return'?'
}
}

/**
*
*@param{VoiceChannel}channel
*@param{string}botId
*@returns{boolean}
*/
functionisAlreadyInChannel(channel,botId){
try{
channel.guild.channels.cache.filter(channel=>channel.type==='voice').forEach(channel=>{
channel.members.forEach(member=>{
if(member.user&&member.user.id===botId){
throwError()
}
})
})
}catch{
returntrue
}
returnfalse
}

/**
*
*@param{VoiceState}oldState
*@param{VoiceState}newState
*@returns{boolean}
*/
functionhasUserJoinedChannel(oldState,newState){
return!oldState.channel&&newState.channel
}

module.exports.GuildHandler=newGuildHandler()