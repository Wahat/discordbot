constfs=require('fs');
constfileUtils=require('./file_utils.js')
classConfigHandler{
constructor(){
this.configs=newMap()
}
/**
*@param{string}guildId
*@returnsObject
*/
retrieveConfig(guildId){
if(!this.configs.has(guildId)){
this.configs.set(guildId,this.loadConfig(guildId))
}
returnthis.configs.get(guildId)
}
loadConfig(guildId){
constpath=`./configs/config_${guildId}.json`
if(!fs.existsSync(path)){
fs.copyFileSync('./default_config.json',path,err=>{
if(err){
console.log(`Anerroroccuredwhencopyingdefaultconfig`)
}
})
}
returnfileUtils.openJsonFile(path)
}
saveConfig(guildId,guildConfig){
constpath=`./configs/config_${guildId}.json`
fs.writeFile(path,JSON.stringify(guildConfig,null,'\t'),err=>{
if(err){
console.log(`Anerroroccuredwhensavingguild${guildId}config:${err}`)
}
})
}
/**
*
*@param{Guild}guild
*@param{string}type
*@param{string}key
*@param{string}value
*/
setNewConfigParameter(guild,type,key,value){
console.log(`config:${guild.id},${type}${key}${value}`)
letconfig=this.retrieveConfig(guild.id)
config[type][key]=value
this.saveConfig(guild.id,config)
this.configs.set(guild.id,config)
}
}
module.exports.ConfigHandler=newConfigHandler()